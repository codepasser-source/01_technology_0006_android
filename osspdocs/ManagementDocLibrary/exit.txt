很多网友可能发现自己的Android程序有很多Activity，比如说主窗口A，调用了子窗

口B，在B中如何关闭整个Android应用程序呢? 

首先要说明在B中直接使用finish()，接下来手机显示的还是主窗口A，所以一起来看

看Android开发网是如何实现的吧.

1. Dalvik VM的本地方法

view plaincopy to clipboardprint?
android.os.Process.killProcess(android.os.Process.myPid())    //获取PID  
android.os.Process.killProcess(android.os.Process.myPid())    //获取PID 

目前获取自己的也只有该API，否则从/proc中自己的枚举其他进程吧，不过要说明的

是，结束其他进程不一定有权限，不然就乱套了。 System.exit(0);  //常规java、

c#的标准退出法，返回值为0代表正常退出

2. 任务管理器方法

  首先要说明该方法运行在Android 1.5 API Level为3以上才可以，同时需要权限

android.permission.RESTART_PACKAGES，我们直接结束自己的package即可，直接使

用ActivityManager类的restartPackage方法即可，参数为package name，该类通过

getSystemService(Context.ACTIVITY_SERVICE)来实例化ActivityManager对象，这

种方法系统提供的，但需要显示声明权限，所以使用中需要综合考虑。

3. 根据Activity的声明周期

  我们知道Android的窗口类提供了历史栈，我们可以通过stack的原理来巧妙的实现

，这里我们在A窗口打开B窗口时在Intent中直接加入标志 

Intent.FLAG_ACTIVITY_CLEAR_TOP，这样开启B时将会清除该进程空间的所有

Activity。

在A窗口中使用下面的代码调用B窗口 

view plaincopy to clipboardprint?
Intent intent = new Intent();   
  
intent.setClass(Android123.this, CWJ.class);   
  
intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  //注意本行的FLAG设置   
  
startActivity(intent);  
Intent intent = new Intent();

intent.setClass(Android123.this, CWJ.class);

intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  //注意本行的FLAG设置

startActivity(intent);

 

接下来在B窗口中需要退出时直接使用finish方法即可全部退出。
4.自定义一个Actiivty 栈，道理同上，不过利用一个单例模式的Activity栈来管理

所有Activity。并提供退出所有Activity的方法。代码如下：

view plaincopy to clipboardprint?
　　public class ScreenManager {   
  
　　private static Stack activityStack;   
  
　　private static ScreenManager instance;   
  
　　private ScreenManager(){   
  
　　}   
  
　　public static ScreenManager getScreenManager(){   
  
　　instance=new ScreenManager();   
  
　　}   
  
　　return instance;   
  
　　}   
  
　　//退出栈顶Activity   
  
　　public void popActivity(Activity activity){   
  
　　activity.finish();   
  
　　activityStack.remove(activity);   
  
　　activity=null;   
  
　　}   
  
　　}   
  
　　//获得当前栈顶Activity   
  
　　public Activity currentActivity(){   
  
　　Activity activity=activityStack.lastElement();   
  
　　return activity;   
  
　　}   
  
　　//将当前Activity推入栈中   
  
　　public void pushActivity(Activity activity){   
  
　　activityStack=new Stack();   
  
　　}   
  
　　activityStack.add(activity);   
  
　　}   
  
　　//退出栈中所有Activity   
  
　　public void popAllActivityExceptOne(Class cls){   
  
　　while(true){   
  
　　Activity activity=currentActivity();   
  
　　break;   
  
　　}   
  
　　break;   
  
　　}   
  
　　popActivity(activity);   
  
　　}   
  
　　}   
  
　　}  



本文来自CSDN博客，转载请标明出处：http://blog.csdn.net/longzhi_2009/archive/2011/04/21/6338341.aspx